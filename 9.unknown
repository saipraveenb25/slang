@binding(0) @group(0) var<storage, read_write> outputBuffer_0 : array<f32>;

struct DiffPair_float_0
{
     primal_0 : f32,
     differential_0 : f32,
};

struct A_0
{
     x_0 : f32,
};

struct DiffPair_A_0
{
     primal_0 : A_0,
     differential_0 : A_0,
};

fn s_fwd_A_getVal_0( dpthis_0 : DiffPair_A_0) -> DiffPair_float_0
{
    var _S1 : DiffPair_float_0 = DiffPair_float_0( dpthis_0.primal_0.x_0, dpthis_0.differential_0.x_0 );
    return _S1;
}

fn s_fwd_f_0( _S2 : DiffPair_float_0,  _S3 : A_0) -> DiffPair_float_0
{
    var _S4 : f32 = _S2.primal_0 * _S2.primal_0;
    var _S5 : f32 = _S2.differential_0 * _S2.primal_0;
    var _S6 : f32 = _S5 + _S5;
    var _S7 : DiffPair_float_0 = s_fwd_A_getVal_0(_S3);
    var _S8 : DiffPair_float_0 = DiffPair_float_0( _S4 + _S7.primal_0, _S6 + _S7.differential_0 );
    return _S8;
}

@compute
@workgroup_size(1, 1, 1)
fn computeMain(@builtin(global_invocation_id) dispatchThreadID_0 : vec3<u32>)
{
    var a_0 : A_0;
    a_0.x_0 = 2.0f;
    var _S9 : DiffPair_float_0 = DiffPair_float_0( 1.5f, 1.0f );
    var _S10 : DiffPair_float_0 = s_fwd_f_0(_S9, a_0);
    outputBuffer_0[i32(0)] = _S10.primal_0;
    outputBuffer_0[i32(1)] = _S10.differential_0;
    return;
}

